@startuml
'https://plantuml.com/sequence-diagram

title User creation & SSO Flow


'autonumber

Actor customer
Actor customerAdmin

participant 1Click <<APPS>>
participant ACE <<APPS>>
participant SSP <<APPS>>
participant XomIntegration <<Integration>>
participant ConfluentKafka <<Integration>> #Orange
participant "User DashBoard" as IAM <<APPS>> #Pink
participant "User DashBoard BFF" as IAMBFF <<APPS>> #Pink
participant "User management Service" as IDPBFF <<APPS>> #Pink
database "User management Service" as UserServiceDB <<DB>> #Pink


participant IDPKafkaListener <<APPS>> #Pink
participant AUTH0 <<IDP>> #Orange
participant AUTH0DB <<DataConnection>>
participant SMPTService <<APPS>> #Orange
participant "ADLDS API" as IDPHelper <<APPS>>
participant PING <<IDP>>
participant ADLDS <<DataSource>>
participant CDS
actor XOM

== User DashBoard, User creation Flow (By Internal user)==

    XOM -> IAM : Create Page
    XOM <-- IAM : Create page redirect




        XOM -> IAM : EnterUserID
        IAM -> IAM : Validateuserid (When user Step out of the ID box or click next)
        activate IAM
            IAM -> IAMBFF : validateUserID()
            activate IAMBFF
                IAMBFF -> AUTH0 : validateUserID
                    activate AUTH0
                        IAMBFF <-- AUTH0 : Ture/False
                        alt False
                            IAMBFF ->IDPHelper : getuser();
                            activate IDPHelper
                                IAMBFF <-- IDPHelper : exist or null
                            deactivate IDPHelper
                            alt exist
                                IAMBFF -> IAMBFF : False
                            else
                                IAMBFF -> IAMBFF : True
                            end
                        end
                    deactivate AUTH0
                IAM <-- IAMBFF : Ture/False
            deactivate IAMBFF
        alt user exist = True
            IAM --x XOM : User exist user update flow
            deactivate IAM
        else
              IAM --> XOM : ok
        end



    loop select sold to until click Submit request
        XOM ->IAM : Search Sold to (ID / Name)
            activate IAM
                IAM -> IAMBFF : Search Sold to (ID / Name)
                    activate IAMBFF
                        IAMBFF -> CDS : Search Sold to (ID / Name)
                            activate CDS
                                IAMBFF <-- CDS : List sold to + partner
                            deactivate CDS
                        IAMBFF -> IAMBFF : Filter data Sold to + partner + salesarea only
                        IAM <-- IAMBFF : Sold to (with partner) list
                    deactivate IAMBFF
                IAM --> XOM : Sold to list
            deactivate IAM


       XOM -> IAM : Add Sold to / Update (salesarea)


        XOM -> IAM : select RoleType
            activate IAM
                alt RoleType = Admin
                IAM -> IAMBFF : get RoleList(salesarealist,RoleType.Admin)
                    activate IAMBFF
                        IAMBFF -> IDPBFF : getRole(salesarealist,RoleType.Admin)
                            activate IDPBFF
                                IDPBFF -> UserServiceDB : getRole(salesarealist,RoleType.Admin)
                                IDPBFF <-- UserServiceDB
                                IAMBFF <-- IDPBFF :  AdminRoleList
                            deactivate IDPBFF
                        IAM <-- IAMBFF : AdminRoleList
                    deactivate IAMBFF
                    IAM --> XOM : AdminRoleList as pre-select with readonly access
                    IAM ->IAM : Assgin Wildcard for all ship to
                else RoleType = Non-Admin
                   IAM -> IAMBFF : getRoleList(salesarealist,RoleType.NonAdmin)
                       activate IAMBFF
                            IAMBFF -> IDPBFF : getRole(salesarealist,RoleType.NonAdmin)
                                activate IDPBFF
                                    IDPBFF -> UserServiceDB : getRole(salesarealist,RoleType.NonAdmin)
                                    IDPBFF <-- UserServiceDB
                                    IAMBFF <-- IDPBFF :  NonAdminRoleList
                                deactivate IDPBFF
                            IAM <--IAMBFF : NonAdminRoleList
                       deactivate IAMBFF
                        IAM --> XOM : NonAdminRoleList
                        XOM -> IAM : Select roles
                        IAM -> IAM : Select Ship to
                end

            deactivate IAM

           alt Non-Admin Role
                IAM -> XOM :  List of (Sold to / ship to)
           else admin

           end


    end loop

    XOM -> IAM : CreateUserSubmit();
        activate IAM
            IAM -> IAMBFF : createuser (User Jason)
                activate IAMBFF
                    IAMBFF -> IDPBFF : createuser (User Jason)
                        activate IDPBFF
                            IDPBFF -> ConfluentKafka : publish request
                                activate ConfluentKafka
                                    ConfluentKafka --> IDPBFF
                                deactivate ConfluentKafka
                                IAMBFF <-- IDPBFF : User create
                        deactivate IDPBFF
                    IAM <-- IAMBFF : User create
                deactivate IAMBFF
            XOM <-- IAM     : User create
        deactivate IAM


== User DashBoard, User creation Flow (By Extenral User) ==

    customerAdmin -> IAM : Create Page

        customerAdmin -> IAM : EnterUserID
        IAM -> IAM : Validateuserid (When user Step out of the ID box or click next)
        activate IAM
            IAM -> IAMBFF : validateUserID()
            activate IAMBFF
                IAMBFF -> AUTH0 : validateUserID
                    activate AUTH0
                        IAMBFF <-- AUTH0 : Ture/False
                    deactivate AUTH0
                                            alt False
                                                IAMBFF ->IDPHelper : getuser();
                                                activate IDPHelper
                                                    IAMBFF <-- IDPHelper : exist or null
                                                deactivate IDPHelper
                                                alt exist
                                                    IAMBFF -> IAMBFF : False
                                                else
                                                    IAMBFF -> IAMBFF : True
                                                end
                                            end
                IAM <-- IAMBFF : Ture/False
            deactivate IAMBFF
        alt user exist = True
            IAM --x customerAdmin : User exist user update flow
            deactivate IAM
        else
              IAM --> customerAdmin : ok
        end



    loop select sold to until click Submit request
        customerAdmin ->IAM : Search Sold to (ID / Name)
            activate IAM
                IAM -> IAM : Search Sold to from Access Token
                IAM --> customerAdmin
            deactivate IAM


       customerAdmin -> IAM : Add Sold to


        customerAdmin -> IAM : select RoleType()
            activate IAM
                alt RoleType = Admin
                IAM -> IAMBFF : getRoleList(salesarea,RoleType.Admin)
                    activate IAMBFF
                        IAMBFF -> IDPBFF : getRole(salesarea,RoleType.Admin)
                            activate IDPBFF
                                IDPBFF -> UserServiceDB : getRole(salesarea,RoleType.Admin)
                                IDPBFF <-- UserServiceDB
                                IAMBFF <-- IDPBFF :  AdminRoleList
                            deactivate IDPBFF
                        IAM <-- IAMBFF : AdminRoleList
                    deactivate IAMBFF
                    IAM --> customerAdmin : AdminRoleList as pre-select with readonly access
                    IAM ->IAM : Assgin Wildcard for all ship to
                else RoleType = Non-Admin
                   IAM -> IAMBFF : getRoleList(salesarea,RoleType.NonAdmin)
                       activate IAMBFF
                            IAMBFF -> IDPBFF : getRole(salesarea,RoleType.NonAdmin)
                                activate IDPBFF
                                    IDPBFF -> UserServiceDB : getRole(salesarea,RoleType.NonAdmin)
                                    IDPBFF <-- UserServiceDB
                                    IAMBFF <-- IDPBFF :  NonAdminRoleList
                                deactivate IDPBFF
                            IAM <--IAMBFF : NonAdminRoleList
                       deactivate IAMBFF
                        IAM --> customerAdmin : NonAdminRoleList
                        customerAdmin -> IAM : Select roles
                        IAM -> IAM : Select Ship to
                end

            deactivate IAM
    end loop

    customerAdmin -> IAM : CreateUserSubmit();
        activate IAM
            IAM -> IAMBFF : createuser (User Jason)
                activate IAMBFF
                    IAMBFF -> IDPBFF : createuser (User Jason)
                        activate IDPBFF
                            IDPBFF -> ConfluentKafka : publish request
                                activate ConfluentKafka
                                    ConfluentKafka --> IDPBFF
                                deactivate ConfluentKafka
                                IAMBFF <-- IDPBFF : User create
                        deactivate IDPBFF
                    IAM <-- IAMBFF : User create
                deactivate IAMBFF
            customerAdmin <-- IAM     : User create
        deactivate IAM

== User DashBoard, User Search Flow ==
    XOM -> IAM : Search Page ()
    XOM <-- IAM : Search page

    XOM -> IAM : Search by (ID / Name  )
        activate IAM
            IAM -> IAMBFF : Search by (ID / Name +  Access token) )
                activate IAMBFF
                    IAMBFF -> AUTH0 : Search by (ID / Name / Add sold to from Access token)
                        activate AUTH0
                            IAMBFF <-- AUTH0 : UserList
                        deactivate AUTH0
                IAM <-- IAMBFF : UserList

                deactivate IAMBFF
            XOM <-- IAM : UserList
        deactivate IAM

    XOM -> IAM : SelectUser
        activate IAM
            IAM -> IAMBFF : getUserDetail()
                activate IAMBFF
                    IAMBFF -> AUTH0 : getUserDetail()
                    activate AUTH0
                        IAMBFF <-- AUTH0 : UserDetail
                    deactivate AUTH0
                    IAM <-- IAMBFF : UserDetail
                deactivate IAMBFF
            IAM <--XOM : UserDetail
        deactivate IAM

== User DashBoard, User Update Flow ==
   ... <Font color=red size=30> Continue from User Search Flow...
    XOM -> IAM : ModifyUser
    IAM -> XOM : ModifyUserPage
    note left of IAM
            Get select current user detail from Searh flow
    end note

   opt PasswordReset
    XOM -> IAM : PasswordReset
        activate IAM
            IAM -> IAMBFF : PasswordReset
            activate IAMBFF
                IAMBFF -> AUTH0 : PasswordReset
                    activate AUTH0
                        IAMBFF <-- AUTH0 : confirm
                    deactivate AUTH0
                IAM <-- IAMBFF : confirm
            deactivate IAMBFF
        XOM <-- IAM : confirm
        deactivate IAM
    end opt

    opt activate/deactivate user
    XOM -> IAM : UserActivate/Deactivate
            activate IAM
                IAM -> IAMBFF : UserActivate/Deactivate
                activate IAMBFF
                    IAMBFF -> IDPBFF : UserActivate/Deactivate
                        activate IDPBFF
                            IDPBFF -> ConfluentKafka : Publish user update topic
                                activate ConfluentKafka
                                    ConfluentKafka --> IDPBFF :confirm
                                deactivate ConfluentKafka
                            IAMBFF <-- IDPBFF : confirm
                        deactivate IDPBFF
                    IAM <-- IAMBFF : confirm
                deactivate IAMBFF
            XOM <-- IAM : confirm
            deactivate IAM
     end opt

     opt Update profile
      XOM -> IAM : Update Profile (ID / Email)
                activate IAM
                    IAM -> IAMBFF : SynchUser()
                    activate IAMBFF
                        IAMBFF -> IDPBFF : SynchUser()
                         activate IDPBFF
                             IDPBFF -> ConfluentKafka : Publish user update topic
                                 activate ConfluentKafka
                                     ConfluentKafka --> IDPBFF :confirm
                                 deactivate ConfluentKafka
                             IAMBFF <-- IDPBFF : confirm
                         deactivate IDPBFF
                     IAM <-- IAMBFF : confirm
                     deactivate IAMBFF
               XOM <-- IAM : confirm
      deactivate IAM

     end opt

    opt update role
    XOM -> IAM : Update Role

        activate IAM
        alt Admin role
                IAM -> IAMBFF : getRole(salesarea,RoleType.Admin)
                    activate IAMBFF
                        IAMBFF -> IDPBFF: getRole(salesarea,RoleType.Admin)
                          activate IDPBFF
                            IDPBFF -> UserServiceDB : getRole(salesarea,RoleType.Admin)
                            IDPBFF <-- UserServiceDB    : AdminRoleList
                        IAMBFF <-- IDPBFF : AdminRoleList
                     deactivate IDPBFF

                    IAM <-- IAMBFF : AdminRoleList
                  deactivate IAMBFF

                 IAM ->IAM : display current role + role opiton
               deactivate IAM
        else Non-Admin role
            IAM -> IAMBFF : getRole(salesarea,RoleType.NonAdmin)
                activate IAMBFF
                        IAMBFF -> IDPBFF: getRole(salesarea,RoleType.NonAdmin)
                          activate IDPBFF
                            IDPBFF -> UserServiceDB : getRole(salesarea,RoleType.NonAdmin)
                            IDPBFF <-- UserServiceDB    : NonAdminRoleList
                            IAMBFF <-- IDPBFF : NonAdminRoleList
                        deactivate IDPBFF
                IAM <-- IAMBFF : NonAdminRoleList
                deactivate IAMBFF
            IAM ->IAM : display current role + role opiton
        end alt
    end opt

    opt update Soldto/shipto
        XOM -> IAM : Update (Sold to / ship to)


        alt if remove option
            IAM->IAM :remove sold to or shipto from user
        else add sold to
                loop select sold to until click Submit request
                    XOM ->IAM : Search Sold to (ID / Name)
                        activate IAM
                            IAM -> IAMBFF : Search Sold to (ID / Name)
                                activate IAMBFF
                                    IAMBFF -> CDS : Search Sold to (ID / Name)
                                        activate CDS
                                            IAMBFF <-- CDS : List sold to + partner
                                        deactivate CDS
                                    IAMBFF -> IAMBFF : Filter data Sold to + partner + salesarea only
                                    IAM <-- IAMBFF : Sold to (with partner) list
                                deactivate IAMBFF
                            IAM --> XOM : Sold to list
                        deactivate IAM


                   XOM -> IAM : Add Sold to / Update (salesarea)


                    XOM -> IAM : select RoleType
                        activate IAM
                            alt RoleType = Admin
                            IAM -> IAMBFF : getRoleList(salesarealist,RoleType.Admin)
                                activate IAMBFF
                                    IAMBFF -> IDPBFF : getRole(salesarealist,RoleType.Admin)
                                        activate IDPBFF
                                            IDPBFF -> UserServiceDB : getRole(salesarealist,RoleType.Admin)
                                            IDPBFF <-- UserServiceDB
                                            IAMBFF <-- IDPBFF :  AdminRoleList
                                        deactivate IDPBFF
                                    IAM <-- IAMBFF : AdminRoleList
                                deactivate IAMBFF
                                IAM --> XOM : AdminRoleList as pre-select with readonly access
                                IAM ->IAM : Assgin Wildcard for all ship to
                            else RoleType = Non-Admin
                               IAM -> IAMBFF : getRoleList(salesarealist,RoleType.NonAdmin)
                                   activate IAMBFF
                                        IAMBFF -> IDPBFF : getRole(salesarealist,RoleType.NonAdmin)
                                            activate IDPBFF
                                                IDPBFF -> UserServiceDB : getRole(salesarealist,RoleType.NonAdmin)
                                                IDPBFF <-- UserServiceDB
                                                IAMBFF <-- IDPBFF :  NonAdminRoleList
                                            deactivate IDPBFF
                                        IAM <--IAMBFF : NonAdminRoleList
                                   deactivate IAMBFF
                                    IAM --> XOM : NonAdminRoleList
                                    XOM -> IAM : Select roles
                                    IAM -> IAM : Select Ship to
                            end

                        deactivate IAM

                end loop
        XOM -> IAM : UpdateUser()
        activate IAM
                    IAM -> IAMBFF : SynchUser()
                    activate IAMBFF
                        IAMBFF -> IDPBFF : SynchUser()
                         activate IDPBFF
                             IDPBFF -> ConfluentKafka : Publish user update topic
                                 activate ConfluentKafka
                                     ConfluentKafka --> IDPBFF :confirm
                                 deactivate ConfluentKafka
                             IAMBFF <-- IDPBFF : confirm
                         deactivate IDPBFF
                     IAM <-- IAMBFF : confirm
                     deactivate IAMBFF
               XOM <-- IAM : confirm
      deactivate IAM

        end


    end opt





== User DashBoard, User Update Flow by External ==
... <font size= 50> TBD  ...






== 1Click's User creation Flow ==

    XOM -> 1Click : setupNewAccount()
    activate 1Click
        1Click -> IDPBFF : validateUserEmailAndID()
        activate IDPBFF
            IDPBFF->AUTH0 : validateUserEmailAndID()
            AUTH0 -> AUTH0DB : validateUserEmailAndID()
                activate AUTH0DB
                    AUTH0 <-- AUTH0DB
                deactivate AUTH0DB
                IDPBFF<-- AUTH0
            IDPBFF -> IDPHelper : ValidateUserbyEmailAndID()
            activate IDPHelper
                IDPHelper -> ADLDS : GetuserbyEmailorID()
                activate ADLDS
                    IDPHelper <-- ADLDS
                deactivate ADLDS
                IDPBFF <-- IDPHelper : true/false
            deactivate IDPHelper
            1Click <-- IDPBFF:  <font color=red>   ID and location as a list
        deactivate IDPBFF
        deactivate 1Click


    alt #Grey ID list =0
       note right of 1Click
                *Update Flow need userID , can't update by email
                *If ID exist in ADLDS , ID need to be convert to AUTH0
       end note

        1Click ->IDPBFF : createUser(user)
        activate 1Click

            activate IDPBFF
                IDPBFF -> ConfluentKafka : createUserWithTopic(user,orgid)
                activate ConfluentKafka
                    IDPBFF <--ConfluentKafka
                deactivate ConfluentKafka
                1Click <--IDPBFF
            deactivate IDPBFF
        deactivate 1Click

   else ID > 0 need update to pick the ID from the list
            1Click ->x XOM : <font color=red> Please use update flow
            note right of 1Click
                *Update ID is out of R1 scope
                *Update Flow need userID , can't update by email
                *If ID exist in ADLDS , ID need to be convert to AUTH0

            end note
   end alt

    deactivate 1Click


== 1Click's Sold to update flow ==
    CDS -> 1Click : updateSoldtoNumber()

      note right of 1Click
                *Update only ID that create by SSP & 1click after Go live
                *Not support ID exist in ADLDS
                *If ID exist in ADLDS , ID need to be convert to AUTH0 manually
       end note



    1Click -> IDPBFF : UpdateUser(UserID)
    activate 1Click
       activate IDPBFF
       IDPBFF -> AUTH0 : ValidateUserID()

        activate AUTH0
            AUTH0 -> AUTH0DB : ValidateUserbyID()
            activate AUTH0DB
                AUTH0 <-- AUTH0DB
            deactivate AUTH0DB

          IDPBFF <-- AUTH0 : Ture/False
        deactivate AUTH0
    alt #Gold if userID exist
        IDPBFF -> AUTH0 : Updateuser(userid,Metadata)
         activate AUTH0
            AUTH0 -> AUTH0DB : Updateuser
            activate AUTH0DB
                AUTH0 <-- AUTH0DB
            deactivate AUTH0DB
        IDPBFF <-- AUTH0
        deactivate AUTH0
        1Click <-- IDPBFF
    else
        1Click x<-- IDPBFF : User not exist

    end

    deactivate 1Click

              IDPBFF -> ConfluentKafka : createUserWithOrgTopic(user,orgid)
                    activate ConfluentKafka
                        IDPBFF <--ConfluentKafka
                    deactivate ConfluentKafka
        deactivate IDPBFF

== Kafka process ==

            IDPKafkaListener -> ConfluentKafka : GetEvent()
                activate IDPKafkaListener
                    IDPKafkaListener <-- ConfluentKafka
                    IDPKafkaListener -> AUTH0 :CreateUser();
                        activate AUTH0
                            AUTH0 -> AUTH0DB : Createuser
                            activate AUTH0DB
                                AUTH0 <-- AUTH0DB
                            deactivate AUTH0DB
                            IDPKafkaListener <-- AUTH0
                            deactivate IDPKafkaListener
                            AUTH0 -> SMPTService
                                activate SMPTService
                                    SMPTService -> customer : sendNotificationEmail() (URL , ID , PWD)
                            AUTH0 <-- SMPTService


                        deactivate SMPTService
                        deactivate AUTH0




    deactivate IDPKafkaListener

    XomIntegration -> ConfluentKafka : consume user create topic
    activate XomIntegration
    activate ConfluentKafka
    XomIntegration <-- ConfluentKafka
    deactivate XomIntegration
    deactivate ConfluentKafka

    SSP -> XomIntegration : consume user create topic
    activate SSP
        SSP <-- XomIntegration
        SSP -> SSP : Create User
    deactivate SSP

        ACE -> ConfluentKafka : consume user create topic
        activate ACE
            ACE <-- ConfluentKafka
            ACE -> ACE : Create User
        deactivate ACE



== Sold to unblock ==
CDS -> ConfluentKafka : Sold to unblock
  activate ConfluentKafka
    ConfluentKafka -> XomIntegration : Message Topic Produce
    activate XomIntegration
        ConfluentKafka <- XomIntegration
    deactivate XomIntegration
CDS <-- ConfluentKafka
  deactivate ConfluentKafka

    SSP -> XomIntegration : consume sold update topic
    activate SSP
        SSP <-- XomIntegration
        SSP -> customer : User unblock
    deactivate SSP


== User Log on to SSP ==

customer ->SSP : Logon()
SSP -> AUTH0 : Redirect user to IDP for login
alt #Orange UserID in AUTH0
    alt is password correct / id active
        customer <-- AUTH0 : log on success
    else
        customer x-- AUTH0 : log on fail
    end alt

else check user in ADLDS
    AUTH0 -> PING : Federate ID & Password
    alt is password correct / id active
        AUTH0 <-- PING : log on success
        customer <-- AUTH0 : log on success
    else
        AUTH0 x-- PING :  log on fail
        customer x-- AUTH0 : log on fail
    end alt

end alt

== User Log on to ACE ==

customer ->ACE : Logon()
ACE -> PING : Redirect user to IDP for login
alt #Tomato UserID in PING
    alt is password correct / id active
        customer <-- PING : log on success
    else
        customer x-- PING : log on fail
    end alt

else check user in AUTH0
    PING -> AUTH0 : Federate ID & Password
    alt is password correct / id active
        PING <-- AUTH0 : log on success
        customer <-- PING : log on success
    else
        PING x-- AUTH0 :  log on fail
        customer x-- PING : log on fail
    end alt

end alt


== SSO Navigate both SSP & ACE ==

customer ->SSP : Logon()
SSP -> AUTH0 : Redirect user to IDP for login
customer <-- AUTH0 : AUTH0 Token
customer -> ACE : Access ACE's Order PAGE  with AUTH0 Token
ACE -> PING : Redirect to AUTH0 Token
PING -> AUTH0 : Federate
PING <-- AUTH0
customer <-- PING : Redirect to order page
customer -> ACE : order page load



== ACE User Create Flow Primary ID ==
autonumber 1
XOM -> ACE : Primary ID create
ACE -> ADLDS : PrimaryID create in ADLDS
ACE <-- ADLDS : Return
PING ->customer :email sendNotificationEmail

== ACE User Create Flow Secondary ID ==
autonumber 1
XOM -> ACE : Secondary ID create
ACE -> ADLDS : Secondary create in ADLDS
ACE <-- ADLDS : Return
PING ->customer :email sendNotificationEmail



@enduml
